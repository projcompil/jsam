Activités variables


Essayer autres erreurs


 ./astat.r -f results/newclique.csv --color fcorrupt --abs efficiency -W 0  --shape activities -s sum_of_sum!  --lines -S 0.03 -I 1  -E 0.1 -e 12

 ./astat.r -f results/newclique.csv --color fsum --abs efficiency -W 0  --shape activities -z erase_clusters!  --lines  -S 0.01 -I 1  -e 14 --maxord 0.05


 f <- function(a, l, c, e) log2(1-2^(-log2(choose(l, a))/(a*(c - (e+1)/2))))/log2(1 - (a/l)^2)


 x = 1:20

plot(x, effi(f(x, 256, 16, 8), 256, x, 16))


err <- function (a, l, m, c, e) 1 - (1 - (1 - (1-(a/l)^2)^m )^(a * (c-e)))^(choose(l, a) - 1)

x = seq(500, 15000, by = 500)
> plot(x, err(2, 256, x, 16, 8), type="l")



sparse -> Ala pour les règles

Austin --> lire


Faire write csv avec R pour obtenir la bonne efficacité, puis la rajouter dans Julia

Essayer winner takes all/ comparer au théorique


forumle théorique trouvée ! :  p <- function(d, l, c, ce, a) 1 - (1-d^(a * (c - ce)))^(ce * (l-a))

 po <- function(m, l, c, ce, a) p(density(m, l, a), l, c, ce, a)

 effi <- function (m, l, a, c) 2 * m * ( c *log2(choose(l, a)) - log2(m) + 1)/(c*(c-1) * l * l)
  z = data.frame(x = x, eff = effi(x, 512, 2, 4), err = po(x, 512, 4, 1, 2))
> plot(z$eff, z$err)

./astat.r -f results/clique_results.csv  --color activities  --shape maxiterations  -c 8 -z erase_clusters! --ord ipeta --abs pcons --abs m  --lines -e 4 -I 1 --shape pcons

 ./astat.r -f results/clique_results.csv  --color activities  --shape maxiterations  -c 8 -z erase_clusters! --ord ipeta --abs pcons --abs m  --lines -e 4 --shape pcons -a 3 -I 4 

Ajouter possibilité tracé théorique

Faire théorie "unreliable---"

iaeta et ieta ?

scale_linetype


pvc <- function(x, d, c, ce, a) choose(a * ce, x) * d^x * (1-d)^(a * ce - x)
pv <- function(x, d, c, a) choose(a *( c-1), x) * d^x * (1-d)^(a * (c-1) - x)

pvcsupn <- function (n, d, c, ce, l, a) sum(pvc((n- a*(c-ce-1)):(a*(c-1)), d, c, ce, a))

#pvcsupn <- function (n, d, c, ce, l, a) sum( sapply( (n- a*(c-ce-1)):(a*(c-1)), function(x) pvc(x, d, c, ce, a)))
#
#pvcsupn <- function (n, d, c, ce, l, a) { px <- function(x) pvc(x, d, c, ce, a) ; sum( sapply( (n- a*(c-ce-1)):(a*(c-1)), px)) }

pvinfn <- function(n, d, c, ce, l, a) sum(pv(0:(n-1), d, c, a))^(l-a)

#pvinfn <- function(n, d, c, ce, l, a) sum( sapply(0:(n-1), function(x) pv(x, d, c, a)))^(l-a)
#
#pvinfn <- function(n, d, c, ce, l, a) { px <- function(x) pv(x, d, c, a) ; sum( sapply(0:(n-1), px))^(l-a) }


ppartiel  <- function(n, d, c, ce, l, a) a * ( pvcsupn(n,d,c,ce,l,a) )^(a-1) * pvc(n - a*(c-ce-1), d, c, ce, a) * pvinfn(n,d,c,ce,l,a)


#ptotal <- function(m, c, ce, l, a) { d = density(m, l, a) ;  sum(ppartiel( (a * (c - ce -1)):(a * (c-1)), d, c, ce, l, a)) }

#Ptotal <- function(m, c, ce, l, a) { d = density(m, l, a) ;  px <- function(x,d,c,ce,l,a) ppartiel(x, d, c, ce, l, a) ;  sum( sapply( (a * (c - ce -1)):(a * (c-1)), px)) }

ptotal <- function(m, c, ce, l, a) { px <- function(x) ppartiel(x, density(m,l,a), c, ce, l, a) ;  (sum( sapply( (a * (c - ce -1)):(a * (c-1)), px)))^(ce) }


plot(m, sapply(m, function(x) ptotal(x, 4, 2, 512, 2)))

sommes multinomiales ?
  density <- function (m, l, a) 1 - (1-(a/l)^2)^m


Tracer graphique abec bonne ordonnée : ./astat.r -f results/clique_results.csv -e 2 -c 4 -z erase_clusters! --abs m --shape maxiterations --fcolor --ord ipeta --abs pcons -O --color activities --shape maxiterations --lines -S 0.01 -w ipeta_c4l512eras2psi.pdf --xlab psi

psi uniquement arêtes qui meurent


convergence divergence

réseaux Willshaw

activités variables dans chaque cluster
scores partiels ? (avoir réussi à reconstituer la moitié de ce qu'il manquait)
comparer laplacien

réseaux plus aléatoires

différentes probas d'activités.
 gamma = n activités pour les erreurs ? -> marche bien mieux !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!

 Pour les erreurs, prendre gamma = n activités



 pvc(x, d, ce) = binomial(ce, x) * d^x * (1-d)^(ce - x)
 pv(x, d, c) = binomial(c-1, x) * d^x * (1-d)^(c-1-x)

 ppar(n, d, c, ce, l) = apvc(n,d,c,ce) * ((sum (map(x -> pv(x, d, c), [0:n-1]))))^(l-1)
 
function pr(m, l, c, ce)
           d = density(m, l)
           (sum( map(n -> ppar(n, d, c, ce, l), [1:c-1])))^ce
       end
using PyPlot

density(m, l) = 1 - (1-1/l^2)^m
julia> plot(m, 1 - map(m) do a pr(a, 512, 4, 1) end)


bpvc(x, d, ce) = binomial(ce-1, x) * d^x * (1-d)^(ce-1 - x)

 pinter(n, d, c, ce, l) = ((sum (map(x -> pv(x, d, c), [0:n-1]))))^(l-1)



ppar(n, d, c, ce, l) = apvc(n,d,c,ce) * pinter(n, d, c, ce, l)
ppar (generic function with 1 method)

julia> qpvc(x, d, ce) = binomial(ce-1, x) * d^x * (1-d)^(ce-1 - x)
qpvc (generic function with 1 method)

julia> bpvc(n,d, c, ce) = qpvc(n - (c - ce-1), d, ce)
bpvc (generic function with 2 methods)

julia> ppar(n, d, c, ce, l) = apvc(n,d,c,ce) * pinter(n, d, c, ce, l)
ppar (generic function with 1 method)

julia> bppar(n, d, c, ce, l) = bpvc(n,d,c,ce) * pinter(n, d, c, ce, l)
bppar (generic function with 1 method)

julia> function pr(m, l, c, ce)
           d = density(m, l)
           (sum( map(n -> ppar(n, d, c, ce, l), [1:c-1])))^(c-ce) * ((sum( map(n -> bppar(n, d, c, ce, l), [1:c-1])))^ce
       end
ERROR: syntax: missing separator in tuple

julia> function pr(m, l, c, ce)
           d = density(m, l)
           (sum( map(n -> ppar(n, d, c, ce, l), [1:c-1])))^(c-ce) * ((sum( map(n -> bppar(n, d, c, ce, l), [1:c-1]))))^ce

julia> bpvc(n,d, c, ce) = qpvc(n - (c - ce), d, ce)
bpvc (generic function with 2 methods)

julia> bppar(n, d, c, ce, l) = bpvc(n,d,c,ce) * pinter(n, d, c, ce, l)
bppar (generic function with 1 method)

julia> function pr(m, l, c, ce)
           d = density(m, l)
           (sum( map(n -> ppar(n, d, c, ce, l), [1:c-1])))^(c-ce) * ((sum( map(n -> bppar(n, d, c, ce, l), [1:c-1]))))^ce
       end


*





julia> function pvgc(n, d, c, ce)  x = n - (c-ce); binomial(ce, x) * d^x * (1-d)^(ce-x) end
pvgc (generic function with 1 method)

julia> function pvge(n, d, c, ce)  x = n - (c-ce); binomial(ce-1, x) * d^x * (1-d)^(ce-1-x) end
pvge (generic function with 1 method)

julia> pv(x, d, c, ce) = binomial(c-1, x) * d^x * (1-d)^(c-1-x)
pv (generic function with 1 method)

julia> function pvabe(n, d, c, ce) x = n - 1 ; binomial(c-1, x) * d^x * (1-d)^(c-1-x)
       end
pvabe (generic function with 1 method)

julia> 



julia> pcpar(n, d, c, ce, l) = pvgc(n,d,c,ce) * ( sum (map(x->pv(x,d,c,ce), [0:n-1])) )^(l-1)
pcpar (generic function with 1 method)

julia> pepar(n, d, c, ce, l) = pvge(n,d,c,ce) * ( sum (map(x->pv(x,d,c,ce), [0:n-1])) )^(l-2) * (sum (map(x->pvabe(x, d, c, ce), [0:n-1]))
       )
pepar (generic function with 1 method)




function ptotal(m, c, ce, l)
           d = density(m, l)
           sum( map(x -> pcpar(x, d, c, ce, l), [1:c]))^(c-ce) * sum(map(x -> pepar(x, d, c, ce, l), [1:c]))^ce
       end
-


pvgc <- function (n, d, c, ce)  { x = n - (c-ce); choose(ce, x) * d^x * (1-d)^(ce-x) }
pvge <- function (n, d, c, ce) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d)^(ce-1-x) }
pv<- function (x, d, c, ce) { choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pvabe <- function(n, d, c, ce) { x = n - 1 ; choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pcpar <- function(n, d, c, ce, l) { pvgc(n,d,c,ce) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce))) )^(l-1) }
pepar<- function(n, d, c, ce, l) { pvge(n,d,c,ce) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce)))) }
ptotal <- function (m, c, ce, l) {
 d= 1- (1-1/l^2)^m
 sum( sapply(1:c, function (x) pcpar(x, d, c, ce, l)))^(c-ce) * sum(sapply(1:c, function(x) pepar(x, d, c, ce, l)))^ce
}

qplot(m, 1-sapply(m, function(x) ptotal(x, 4, 1, 512))) + geom_line()


plotter en fonction de m let taux d'erreur pour les erreurs psi /effacements

blokeh python ?
ne pas mettre à jour R !!!!!!!!!!!!! factorise les données (stupide logiciel)


#pvgc <- function (n, d, c, ce, g, a)  { x = n - a*(c-ce-1) - g ; choose(a * ce, x) * d^x * (1-d)^(a*ce-x) }
#pvge <- function (n, d, c, ce) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d>  




library(ggplot2)
pvgc <- function (n, d, c, ce, g, a)  { x = n - a*(c-ce-1) - g ; choose(a * ce, x) * d^x * (1-d)^(a*ce-x) }
pvge <- function (n, d, c, ce, a) {  x = n - a*(c-ce); choose(a*(ce-1), x) * d^x * (1-d)^(a *(ce-1)-x) }
pv<- function (x, d, c, ce, a) { choose(a*(c-1), x) * d^x * (1-d)^(a*(c-1)-x) }
pvabe <- function(n, d, c, ce, g, a) { x = n - g ; choose(a*(c-1), x) * d^x * (1-d)^(a*(c-1)-x) }

psupc <- function(n, d, c, ce, l, g, a) sum(sapply((n+1):(a*(c-1)+g), function(x) pvgc(x,d,c,ce,g,a)))
psupe <- function(n, d, c, ce, l, g, a) sum(sapply((n+1):(a*(c-1)+g), function(x) pvge(x,d,c,ce,a)))

pcpar <- function(n, d, c, ce, l, g, a) { (sum(sapply(0:(a-1), function(x) choose(a, x) * psupc(n,d,c,ce,l,g,a)^x * pvgc(n,d,c,ce,g,a)^(a-x) ))) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce, a))) )^(l-a) }

pepar<- function(n, d, c, ce, l, g, a) {  (sum(sapply(0:(a-1), function(x) choose(a, x) * psupe(n,d,c,ce,l,g,a)^x * pvge(n,d,c,ce,a)^(a-x) ))) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce,a))) )^(l-a-1) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce,g,a)))) }

ptotal <- function (m, c, ce, l, g, a) {
 d= 1- (1-(a/l)^2)^m
 sum( sapply(1:(g+a*(c-1)), function (x) pcpar(x, d, c, ce, l,g,a)))^(c-ce) * sum(sapply(1:(g+a*(c-1)), function(x) pepar(x, d, c, ce, l,g,a)))^ce
 }


m = seq(1000, 50000, by = 1000)
qplot(m, 1 - sapply(m, function (x) ptotal(x, 8, 2, 512, 1, 2)))
 faire une binomiale sur les scores str supérieures et les scores égaux



 #
#pcpar <- function(n, d, c, ce, l, g, a) { (sum(sapply(n:(a*(c-1)+g), function(x) pvgc(x,d,c,ce,g,a))))^(a-1) * pvgc(n,d,c,ce, g, a) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce, a))) )^(l-a) }

#pepar<- function(n, d, c, ce, l, g, a) { (sum(sapply(n:(a*(c-1)+g), function(x) pvge(x,d,c,ce,a))))^(a-1) * pvge(n,d,c,ce,a) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce,a))) )^(l-a-1) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce,g,a)))) }
 #

 classification via plusieurs activités ? associer des classes

 essayer gamma = activities + 1

 sparse + maximum proba possible

 introduire terme pour assurer reste activé
 améliorer courbes


 ./astat.r -f results/clique_results.csv --color activities --maxactivities 4 --fcolor -z erase_clusters! --shape maxiterations --mmiterations 4 -O --lines -d 0 --ord psieta --abs pcons -c 8 -l 256 -e 4 --minpoolsize 5 -w 3portant_c8l256e4_psi.pdf


./astat.r -f results/clique_results.csv --color activities --maxactivities 4 --fcolor -z erase_clusters! --shape maxiterations --mmiterations 4 -O --lines -d 0 --ord rceta -p 0 -c 8 -l 256 --minpoolsize 5


essayer laplaciens graphes


./astat.r -f results/clique_results.csv --color activities --maxactivities 4 --fcolor -z erase_clusters! --shape maxiterations --mmiterations 4 -O --lines -d 0 --ord psieta -c 8 -l 256 --minpoolsize 5 -e 4 --abs pcons --ncolor Activities --nshape Iterations -S 0.01 --xlab psi


tester sum of max !!



 f <- function(m, c, ce, l, a) { al = 1/choose(l,a) ; (sum(sapply((ce+1):c, function (k) choose(c, k) * (1-al)^k * al^(c-k))))^(m-1) }   : à rentrer pour comparer efficacités

 faire courbes à la main (ggplot) pour ajouter densité/erreurs th en même temps etc.


 partir alphabet poids constant
 l'état du réseau est défini par l'état du vecteur binaires

 enlever complexité

 expliciter w = a (car a 1 dans le message) + as well

 décrire itérativité
 transition messages iiid

 introduire cluster
 exemple 
 fixer deux messages

 rappeler hypothèse indépendance : quiestion ouverte 
 séparer les efficacités : décrire mémoire parfaite

 retirer les connections au sein même cluster
 rajouter perf ml dans courbes
 commenter les courbes on observe, attente : détails

##############"
 en utilisant le même matériel !!!!
 #################" brute force sur les cliques

 section brute force sur les cliques

 section pour les problèmes !!! pour tout, recherche exhaustive (mais pas réponse exacte) rapide, sans trop de mémoire

 mardi problem statements + densité

 + dynamic


 annexe pour résultat théorique

 penser application


fig 3

./astat.r -f results/clique_results.csv --color maxiterations --fcolor --minpoolsize 10 --abs m --shape winners -c 4 -l 512 -e 2 --lines --thm -S 5000 --xlab "Number of stored messages (M)" --ylab "Error rate" --ncolor Iterations --nshape "Winners (w)" -w fig3c4l512e2a2.pdf -a 2

fig 4
./astat.r -f results/clique_results.csv --color maxiterations --fcolor --minpoolsize 10 --abs m --shape winners -c 4 -l 512 -e 2 --lines --ther --xlab "Number of stored messages (M)" --ylab "Error rate" --ncolor Iterations --nshape "Winners (w)" -a 2 -z corrupt_clusters! -e 1 -w fig4c4l512a2e1corr.pdf -S 5000

fig 6

./astat.r -f results/clique_results.csv -p 0.02 --minpoolsize 10 --abs m --color maxiterations --shape gamma --fcolor --nshape "bold(gamma)" --ncolor Iterations --lines --thpsi --xlab "Number of stored messages (M)" --ylab "Error rate" -S 2500 -w fig2psic8l256e4psi2percent.pdf


figures densités :
d = read.csv("results/clique_results.csv", comment.char = "#")
d = subset(d, c == 5 & l == 256 & activities <= 3 & pcons == 0)
ggplot(d, aes(m, density)) + geom_point(aes(colour = factor(activities))) + geom_path(aes(colour="Theoretical\na = 1\n"), stat="function", fun=function(x) dens(x, 256, 1)) + geom_path(aes(colour="Theoretical\na = 2\n"), stat="function", fun=function(x) dens(x, 256, 2)) + geom_path(aes(colour="Theoretical\na = 3"), stat="function", fun=function(x) dens(x, 256, 3)) + xlab("Number of stored messages (M)") + ylab("Density (d)") + scale_color_discrete("Activities (a)")
ggsave("c5l256densities.pdf")


remplacer w par \alpha
r

figures densités :
d = read.csv("results/clique_results.csv", comment.char = "#")
d = subset(d, c == 5 & l == 256 & activities <= 3 & pcons == 0)
ggplot(d, aes(m, density)) + geom_point(aes(colour = factor(activities))) + geom_path(aes(colour="Theoretical\na = 1\n"), stat="function", fun=function(x) dens(x, 256, 1)) + geom_path(aes(colour="Theoretical\na = 2\n"), stat="function", fun=function(x) dens(x, 256, 2)) + geom_path(aes(colour="Theoretical\na = 3"), stat="function", fun=function(x) dens(x, 256, 3)) + xlab("Number of stored messages (M)") + ylab("Density (d)") + scale_color_discrete("Activities (a)")
ggsave("c5l256densities.pdf")


remplacer w par \alpha
refaire psi avec erreurs symétriques
