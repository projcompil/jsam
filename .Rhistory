plot(x, f(x, 256, 16, 8))
plot(x, f(x, 256, 16, 10))
f <- function(a, l, c, e) log2(1-2^(-log2(choose(l, a))/(a*(c - (e+1)/2))))/log2(1 - (a/l)^2)
plot(x, f(x, 256, 16, 10))
f <- function(a, l, c, e) log2(1-2^(-log2(choose(l, a))/(a*(c - (e+1)/2))))/log2(1 - (a/l)^2)
plot(x, f(x, 256, 16, 10))
x = 1:5
plot(x, f(x, 256, 16, 10))
plot(x, f(x, 256, 16, 1))
plot(x, f(x, 256, 16, 10))
plot(x, f(x, 256, 16, 1))
f(1, 256, 16, 1)
f(1, 256, 16, 10)
f(1, 256, 16, 16)
f(1, 256, 16, 15)
f(1, 256, 16, 5)
plot(x, f(x, 256, 16, 5))
x = 3:5
plot(x, f(x, 256, 16, 5))
plot(x, f(x, 256, 16, 9))
plot(x, effi(f(x, 256, 16, 12), 256, x, 16))
plot(x, effi(f(x, 256, 16, 8), 256, x, 16))
plot(x, effi(f(x, 256, 16, 10), 256, x, 16))
x = 1:20
plot(x, effi(f(x, 256, 16, 10), 256, x, 16))
err <- function (a, l, m, c, e) 1 - (1 - (1 - (1-(a/l)^2)^m )^(a * (c-e)))^(choose(l, a) - 1)
1:2:10
x = seq(500, 10000, by = 500)
plot(err(2, 256, x, 16, 8))
plot(x, err(2, 256, x, 16, 8))
plot(x, err(2, 256, x, 16, 8), type="l")
x = seq(500, 15000, by = 500)
plot(x, err(2, 256, x, 16, 8), type="l")
plot(x, err(2, 256, x, 16, 8), type="l", )
help(plot)
library(ggplot2)
qplot(x, err(2, 256, x, 16, 8), geom="line", )
qplot(x, err(2, 256, x, 16, 8), geom="line", ) + geom_point()
qpl <- qplot(x, err(2, 256, x, 16, 8), geom="line", ) + geom_point()
help(ggsave)
qpl
ggsave("theortempa2.pdf")
x = seq(500, 25000, by = 500)
qpl <- qplot(x, err(2, 256, x, 16, 8), geom="line", ) + geom_point()
qpl
ggsave("theortempa2plus.pdf")
qpl <- qplot(x, err(2, 256, x, 16, 12), geom="line", ) + geom_point()
qpl
x = seq(500, 15000, by = 500)
qpl
x = seq(500, 10000, by = 500)
qpl
ggsave("theortempa2e12plus.pdf")
qpl <- qplot(x, err(2, 256, x, 16, 14), geom="line", ) + geom_point()
qpl
qpl <- qplot(x, err(2, 256, x, 16, 13), geom="line", ) + geom_point()
qpl
ggsave("Programmation/jsam/theortempa2e13plus.pdf")
qpl <- qplot(x, err(3, 256, x, 16, 8), geom="line", ) + geom_point()
qpl
err <- function (a, l, m, c, e) 1 - (1 - (1 - (1-(a/l)^2)^m )^( (c-e)))^(choose(l, a) - 1)
qpl <- qplot(x, err(3, 256, x, 16, 8), geom="line", ) + geom_point()
qpl <- qplot(x, err(3, 256, x, 16, 8), geom="line", ) + geom_point()
qpl <- qplot(x, err(3, 256, x, 16, 8), geom="line", ) + geom_point()
qpl
qpl <- qplot(x, err(3, 256, x, 16, 8), geom="line", ) + geom_point()
apl
d = read.csv("results/clique_results.csv", comment.char="#")
d$X
d$""
d$X
d$X <- c()
d
head(d)
d = read.csv("results/clique_results.csv", comment.char="#")
d[,1:2]
d[,0:2]
d[,0:3]
d[,3:10]
head(d[,3:10])
head(d[,3:20])
head(d[,3:25])
head(d[,3:30])
head(d[,3:31])
head(d[,3:32])
head(d[,3:31])
a = d[,3:31]
write.csv(a, "results/test.csv", sep =",", row.names=FALSE)
write.csv(a, "results/test.csv", row.names=FALSE)
write.csv(a, "results/test.csv", row.names=FALSE, quote=FALSE)
d = read.csv("results/clique_results.csv", comment.char="#")
a = d[,3:31]
d
a
head(a)
a[,0:1]
head(a[,0:1])
head(a)
write.csv(a, "results/test.csv", row.names=FALSE, quote=FALSE)
a = seq(0.0, 0.8, 0.1)
a
b = data.frame(x = c(a,a), y = c(a^2, a))
by
b$y
b$y
b$x
c = factor(d$x)
c = factor(a$x)
a
b
c = factor(b$x)
c
b[,c]
c
c[1]
c[,1]
c[1]
c
table(c)
table(c)
d = table(c)
d[1]
d[0]
d[,1]
d[,0]
d[0]
d[2]
d[3]
d[5]
m <- by(b, factor(b$x), function(x) x[which.max(x$x)])
m
m[1]
m[2]
m[,2]
m[0,2]
m[0,1]
m
m[,1]
m[1]
m[5]
m[5][1]
m[5][0]
m[5][,1]
n = m[5]
n
n[0]
n[,1]
n[1]
n[2]
n
do.call("rbind", m)
q =do.call("rbind", m)
q[1]
q[2]
q[,2]
q[,1]
b = data.frame(x = c(a,a), y = c(a^2, a^3))
m <- by(b, factor(b$x), function(x) x[which.max(x$x)])
q = do.call("rbind", m)
q
m <- by(b, factor(b$x), function(x) x[which.max(x$y)])
q = do.call("rbind", m)
q
b = data.frame(x = c(0,1,0,1), y = c(15,18,7,250))
m <- by(b, factor(b$x), function(x) x[which.max(x$y)])
q = do.call("rbind", m)
q
q[1]
q[2]
q[3]
q[4]
q[,1]
q[,2]
m <- by(b, factor(b$x), function(x) x[which.max(x$x)])
q = do.call("rbind", m)
q
m
q
m <- by(b, factor(b$x), function(x) x[which.max(x$y)])
q = do.call("rbind", m)
q
b
m <- by(b, factor(b$x), function(z) z[which.max(z$y)])
q = do.call("rbind", m)
q
m
b$x
b
m <- by(b, b$x, function(z) z[which.max(z$y)])
q = do.call("rbind", m)
q
b
help(ave)
b
sel <- ave(b$y, b$x, FUN=max)
sel
b[,sel]
q = data.frame(b$x, bÅ·)
q = data.frame(b$x, b$y)
q[,sel]
sel <- ave(b$y, b$x, FUN=max) == b$y
q[,sel]
sel
b[,sel]
b[sel,]
b
pvgc <- function (n, d, c, ce)  { x = n - (c-ce); choose(ce, x) * d^x * (1-d)^(ce-x) }
pvge <- function (n, d, c, ce) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d)^(ce-1-x) }
pv<- function (x, d, c, ce) { choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pvabe <- function(n, d, c, ce) { x = n - 1 ; choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pcpar <- function(n, d, c, ce, l) { pvgc(n,d,c,ce) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce))) )^(l-1) }
pepar<- function(n, d, c, ce, l) { pvge(n,d,c,ce) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce)))) }
ptotal <- function (m, c, ce, l) {
 d= 1- (1-1/l^2)^m
 sum( map(x -> pcpar(x, d, c, ce, l), [1:c]))^(c-ce) * sum(map(x -> pepar(x, d, c, ce, l), [1:c]))^ce
ptotal <- function (m, c, ce, l) {
 d= 1- (1-1/l^2)^m
 sum( sapply(1:c, function (x) pcpar(x, d, c, ce, l)))^(c-ce) * sum(sapply(1:c, function(x) pepar(x, d, c, ce, l)))^ce
}
m = seq(1000,50000,1000)
library(ggplot2)0
library(ggplot2)
qplot(m, ptotal(m, 4, 1, 512))
m = seq(1000,50000,by = 1000)
qplot(m, ptotal(m, 4, 1, 512))
m
ptotal(1000,4,1,512)
1-ptotal(1000,4,1,512)
qplot(m, 1-sapply(m, function(x) ptotal(x, 4, 1, 512)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 4, 1, 512))) ++geom_line()
qplot(m, 1-sapply(m, function(x) ptotal(x, 4, 1, 512))) + geom_line()
qplot(m, 1-sapply(m, function(x) ptotal(x, 4, 1, 512))) + geom_line()
m = seq(1000,40000,by = 1000)
qplot(m, 1-sapply(m, function(x) ptotal(x, 4, 1, 512))) + geom_line()
qplot(m, 1-sapply(m, function(x) ptotal(x, 4, 1, 512))) + geom_line()
qplot(m, 1-sapply(m, function(x) ptotal(x, 8, 3, 256))) + geom_line()
qplot(m, 1-sapply(m, function(x) ptotal(x, 8, 4, 256))) + geom_line()
qplot(m, 1-sapply(m, function(x) ptotal(x, 8, 2, 256))) + geom_line()
qplot(m, 1-sapply(m, function(x) ptotal(x, 8, 2, 256)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 512)))
m = seq(1000,60000,by = 1000)
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 512)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)))
pvgc <- function (n, d, c, ce, g)  { x = n -( (c-ce)-1) - g; choose(ce, x) * d^x * (1-d)^(ce-x) }
pvge <- function (n, d, c, ce, g) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d)^(ce-1-x) }
pv<- function (x, d, c, ce, g) { choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pvabe <- function(n, d, c, ce, g) { x = n - g ; choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pcpar <- function(n, d, c, ce, l, g) { pvgc(n,d,c,ce, g) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce, g))) )^(l-1) }
pepar<- function(n, d, c, ce, l, g) { pvge(n,d,c,ce, g) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce,g))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce, g)))) }
ptotal <- function (m, l, c, ce, g) {
 d= dens(m, l, 1)
 sum( sapply(1:c, function (x) pcpar(x, d, c, ce, l, g)))^(c-ce) * sum(sapply(1:c, function(x) pepar(x, d, c, ce, l, g)))^ce
}
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256, 1)))
dens <- function(m,l,a) { 1 - (1-(a/l)^2)^m }
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256, 1)))
m = seq(1000,20000,by = 1000)
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256, 1)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256, 1)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256, 0)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256, 0)))
m
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256, 0)))
ptotal(1000,16,8,256,1)
ptotal(1000,16,8,256,0)
pvgc(2,0.3,16,8,1)
qplot(m, 1-sapply(m, function(x) ptotal(x, 8, 2, 256, 0)))
ptotal(1000,4,1,256,1)
dens(1000,256,1)
pvgc <- function (n, d, c, ce)  { x = n -( (c-ce)-1) +1; choose(ce, x) * d^x * (1-d)^(ce-x) }
pvge <- function (n, d, c, ce) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d)^(ce-1-x) }
pv<- function (x, d, c, ce) { choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pvabe <- function(n, d, c, ce) { x = n - 1 ; choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pcpar <- function(n, d, c, ce, l, g) { pvgc(n,d,c,ce) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce))) )^(l-1) }
pepar<- function(n, d, c, ce, l, g) { pvge(n,d,c,ce) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce)))) }
ptotal <- function (m, l, c, ce, g) {
 d= dens(m, l, 1)
 sum( sapply(1:c, function (x) pcpar(x, d, c, ce, l)))^(c-ce) * sum(sapply(1:c, function(x) pepar(x, d, c, ce, l)))^ce
}
ptotal(1000,4,1,256,1)
ptotal(1000,4,1,256)
pvgc <- function (n, d, c, ce)  { x = n -( (c-ce)-1) +1; choose(ce, x) * d^x * (1-d)^(ce-x) }
pvge <- function (n, d, c, ce) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d)^(ce-1-x) }
pv<- function (x, d, c, ce) { choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pvabe <- function(n, d, c, ce) { x = n - 1 ; choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pcpar <- function(n, d, c, ce, l) { pvgc(n,d,c,ce) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce))) )^(l-1) }
pepar<- function(n, d, c, ce, l) { pvge(n,d,c,ce) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce)))) }
ptotal <- function (m, l, c, ce) {
 d= dens(m, l, 1)
 sum( sapply(1:c, function (x) pcpar(x, d, c, ce, l)))^(c-ce) * sum(sapply(1:c, function(x) pepar(x, d, c, ce, l)))^ce
}
ptotal(1000,4,1,256)
pvgc <- function (n, d, c, ce)  { x = n - (c-ce); choose(ce, x) * d^x * (1-d)^(ce-x) }
pvge <- function (n, d, c, ce) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d)^(ce-1-x) }
pv<- function (x, d, c, ce) { choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pvabe <- function(n, d, c, ce) { x = n - 1 ; choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pcpar <- function(n, d, c, ce, l) { pvgc(n,d,c,ce) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce))) )^(l-1) }
pepar<- function(n, d, c, ce, l) { pvge(n,d,c,ce) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce)))) }
ptotal <- function (m, c, ce, l) {
 d= 1- (1-1/l^2)^m
 sum( sapply(1:c, function (x) pcpar(x, d, c, ce, l)))^(c-ce) * sum(sapply(1:c, function(x) pepar(x, d, c, ce, l)))^ce
}
ptotal(1000,4,1,256)
qplot(m, 1-sapply(m, function(x) ptotal(x, 8, 2, 256, 0)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 8, 2, 256)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)))
:q
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)))
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256))) + geom_line(type="dotted")
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256))) + geom_line(linetype="dotted")
qplot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256))) + geom_line(linetype="dotted")
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)))
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
m = seq(500,20000, by = 500)
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
data = read.csv("results/clique_results.csv")
d = subset(data, c==16 & l==256)
d
length(d)
size(d)
length(d$errorrate)
unique(d$poolsize)
d = subset(data, c==16 & l==256 & poolsize == 4)
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
plot(data$m, data$errorrate, col="blue", add=TRUE)
plot(data$m, data$errorrate, col="blue", ADD=TRUE)
help(plot)
lines(data$m, data$errorrate, col="blue")
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
d
length(d$errorrate)
par(new=TRUE)
plot(data$m, data$errorrate, col="blue")
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
plot(d$m, d$errorrate, col="blue")
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
par(new=TRUE)
plot(d$m, d$errorrate, col="blue")
m
m = seq(500,20000, by = 500)
m = seq(1000,20000, by = 1000)
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
par(new=TRUE)
plot(d$m, d$errorrate, col="blue")
dev.copy(pdf, "theorique_erreurs_c16l256.pdf")
dev.off()
lines(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
plot(d$m, d$errorrate, col="blue")
lines(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
plot(d$m, d$errorrate, col="blue", xlab = "Error rate", xlab = "Number of learned messages")
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
lines(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
dev.copy(pdf, "theorique_erreurs_c16l256.pdf")
dev.off()
d = subset(data, c==4 & l== 512 & activities == 1 & gamma == 1 & fcorrupt="corrupt_clusters!")
d = subset(data, c==4 & l== 512 & activities == 1 & gamma == 1 & fcorrupt=="corrupt_clusters!")
length(d$errorrate)
d = subset(data, c==4 & l== 512 & activities == 1 & gamma == 1 & fcorrupt=="corrupt_clusters!" & poolsize == 5)
length(d$errorrate)
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
m = seq(1000, 40000, by = 1000)
lines(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 256)), type = 'l')
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
lines(m, 1-sapply(m, function(x) ptotal(x, 4, 1, 512)), type = 'l')
dev.copy(pdf, "theorique_erreurs_c4l512erron1gamma1.pdf")
dev.off()
d$density
d = subset(data, c==16 & l==256)
d$density
d = subset(data, c==16 & l==256 & poolsize == 4)
d$density
lines(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 512)), type = 'l')
m = seq(1000, 70000, by = 1000)
lines(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 512)), type = 'l')
plot(m, 1-sapply(m, function(x) ptotal(x, 16, 8, 512)), type = 'l')
1 - (1/512^2)^50000
1 - (1-1/512^2)^50000
1 - (1-1/512^2)^50000
d = subset(data, c==16 & l==512 & poolsize == 3)
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
plot(m, 1-sapply(m, function(x) ptotal(x, 8, 4, 512)), type = 'l')
plot(m, 1-sapply(m, function(x) ptotal(x, 8, 4, 512)), type = 'l')
m = seq(1000, 30000, by = 1000)
plot(m, 1-sapply(m, function(x) ptotal(x, 8, 4, 512)), type = 'l')
d = subset(data, c==16 & l==512 & poolsize == 3)
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
d
d = subset(data, c==8 & l==512 & poolsize == 3)
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
data =read.csv("results/clique_results.csv")
d = subset(data, c==8 & l==512 & poolsize == 3)
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
lines(m, 1-sapply(m, function(x) ptotal(x, 8, 4, 512)), type = 'l')
data =read.csv("results/clique_results.csv")
d = subset(data, c==8 & l==512 & poolsize == 3)
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
lines(m, 1-sapply(m, function(x) ptotal(x, 8, 4, 512)), type = 'l')
data =read.csv("results/clique_results.csv")
d = subset(data, c==8 & l==512 & poolsize == 3)
plot(d$m, d$errorrate, col="blue", ylab = "Error rate", xlab = "Number of learned messages")
lines(m, 1-sapply(m, function(x) ptotal(x, 8, 4, 512)), type = 'l')
dev.copy(pdf, "theorique_erreurs_c8l512erron4gamma1pool3.pdf")
dev.off()
pvgc <- function (n, d, c, ce)  { x = n - (c-ce); choose(ce, x) * d^x * (1-d)^(ce-x) }
pvge <- function (n, d, c, ce) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d)^(ce-1-x) }
pv<- function (x, d, c, ce) { choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pvabe <- function(n, d, c, ce) { x = n - 1 ; choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pcpar <- function(n, d, c, ce, l) { pvgc(n,d,c,ce) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce))) )^(l-1) }
pepar<- function(n, d, c, ce, l) { pvge(n,d,c,ce) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce)))) }
ptotal <- function (m, c, ce, l) {
 d= 1- (1-1/l^2)^m
 sum( sapply(1:c, function (x) pcpar(x, d, c, ce, l)))^(c-ce) * sum(sapply(1:c, function(x) pepar(x, d, c, ce, l)))^ce
}
pvgc <- function (n, d, c, ce, g)  { x = n - (c-ce-1) + g ; choose(ce, x) * d^x * (1-d)^(ce-x) }
pvgc <- function (n, d, c, ce, g)  { x = n - (c-ce-1) - g ; choose(ce, x) * d^x * (1-d)^(ce-x) }
pvge <- function (n, d, c, ce, g) {  x = n - (c-ce); choose(ce-1, x) * d^x * (1-d)^(ce-1-x) }
pv<- function (x, d, c, ce) { choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pvabe <- function(n, d, c, ce, g) { x = n - g ; choose(c-1, x) * d^x * (1-d)^(c-1-x) }
pcpar <- function(n, d, c, ce, l, g) { pvgc(n,d,c,ce, g) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce,g))) )^(l-1) }
pepar<- function(n, d, c, ce, l,g) { pvge(n,d,c,ce,g) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce,g))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce,g)))) }
ptotal <- function (m, c, ce, l,g) {
 sum( sapply(1:(c+g-1), function (x) pcpar(x, d, c, ce, l,g)))^(c-ce) * sum(sapply(1:(c+g-1), function(x) pepar(x, d, c, ce, l,g)))^ce
}
ptotal <- function (m, c, ce, l,g) {
d = 1 - (1-1/l^2)^m
 sum( sapply(1:(c+g-1), function (x) pcpar(x, d, c, ce, l,g)))^(c-ce) * sum(sapply(1:(c+g-1), function(x) pepar(x, d, c, ce, l,g)))^ce
}
library(ggplot2)
library(ggplot2)
m = seq(1000, 25000, by = 1000)
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 1))
)
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 1)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 0)))
pcpar <- function(n, d, c, ce, l, g) { pvgc(n,d,c,ce, g) * ( sum (sapply(0:(n-1), function(x) pv(x,d,c,ce))) )^(l-1) }
pepar<- function(n, d, c, ce, l,g) { pvge(n,d,c,ce,g) * ( sum (sapply(0:n-1, function(x) pv(x,d,c,ce))) )^(l-2) * (sum (sapply(0:n-1, function(x) pvabe(x, d, c, ce,g)))) }
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 0)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 1)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 2)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 3)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 1)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 2)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 0)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 2)))
m = seq(100,50000, 1000)
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 2)))
m = seq(100,60000, 1000)
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 2)))
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 1)))
g
qplot(m, 1 - sapply(m, function (x) ptotal(x, 4, 1, 512, 1)))
ptotal(0.1, 4, 1, 512, 1)
ptotal(50.95, 4, 1, 512, 1)
ggplot() + stat_function(fun ) function (x) ptotal(x, 4, 1, 512, 1)))
ggplot() + stat_function(fun = function (x) ptotal(x, 4, 1, 512, 1)))
ggplot() + stat_function(fun = function (x) ptotal(x, 4, 1, 512, 1))
ggplot(m) + stat_function(fun = function (x) ptotal(x, 4, 1, 512, 1))
ggplot(aes(m)) + stat_function(fun = function (x) ptotal(x, 4, 1, 512, 1))
c(NULL)
help(geom_line)
a = data.frame(x = c(1,2,3))
a
b = a
b$x = c(1,2,6)
b
a
b = a
b[,1]
d = read.csv("results/clique_results.csv")
library(ggplot2)
qplot(d$erasures, d$errorrate, d)
ggplot(d, aes(errorrate, erasures))
ggplot(d, aes(errorrate, erasures)) + geom_point()
ggplot(d, aes(erasures, errorrate)) + geom_point()
ggplot(d, aes(erasures, errorrate)) + geom_point() + scale_y_continuous(breaks = c(0,1))
ggplot(d, aes(erasures, errorrate)) + geom_point() + scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1))
ggplot(d, aes(erasures, errorrate)) + geom_point() + scale_y_continuous(breaks = 0.1)
ggplot(d, aes(erasures, errorrate)) + geom_point() + scale_y_continuous()
d$errorrate
a = d$errorrate
f = d$errorrate
as.numeric(levels(f))[f]
d$errorrate
d = read.csv("results/clique_results.csv", stringAsFactors = FALSE)
options(stringsAsFactors=FALSE)
d = read.csv("results/clique_results.csv", stringAsFactors = FALSE)
d = read.csv("results/clique_results.csv")
d$errorrate
options(stringsAsFactors=FALSE)
help(read.csv)
help(read.delim)
options(stringsAsFactors=FALSE)
d = read.csv("results/clique_results.csv")
d$errorrate
d = read.csv("results/clique_results.csv")
d
d$rceta <- d$eta / (1 - 1/choose(d$l, d$activities)
1choose(d$l, d$activities)
choose(d$l, d$activities)
d
choose(d$l, d$activities)
choose([1,2,3], [0,1,2])
choose(c(1,2,3), c(0,1,2))
d$rceta <- d$eta / (1 - 1/choose(d$l, d$activities)^(d$c - d$erasures))^(d$m - 1)
d$rceta
d$rceta
write.csv("results/clique_results_prov.csv", quote = FALSE, row.names = FALSE)
write.csv("results/clique_results_prov.csv", quote = FALSE, row.names = FALSE)
write.csv(d, "results/pclique.csv", row.names = FALSE, quote = FALSE)
